<UserControl x:Class="SolutionExtensions.ToolWindows.ExtensionsListToolWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:SolutionExtensions.ToolWindows"             
             xmlns:model="clr-namespace:SolutionExtensions"
             xmlns:shell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"             
             xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:design="clr-namespace:SolutionExtensions._DesignData"
             xmlns:cmt="uri:comments"
             mc:Ignorable="d cmt" 
             d:Background="White"
             Loaded="Control_Loaded"
             cmt:DataContext="{d:DesignData /_DesignData/ExtensionListToolWindowVM.xaml}"
             
             d:DesignHeight="455.41" d:DesignWidth="560.916">
    <UserControl.Resources>
        <ResourceDictionary Source="/SolutionExtensions;component/Themes/VsStyles.xaml"/>
    </UserControl.Resources>
    <Grid>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="boolToVisi"/>
            <model:EmptyConverter x:Key="notEmptyToVisi" Inner="{StaticResource boolToVisi}" Negate="True"/>
            <model:EmptyConverter x:Key="emptyToVisi" Inner="{StaticResource boolToVisi}"/>
            <model:EmptyConverter x:Key="notEmpty" Negate="True"/>
            <Style x:Key="mover" TargetType="Control">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Control">
                            <Border 
                                Padding="0" Margin="5,5,0,5" 
                                VerticalAlignment="Stretch"
                                CornerRadius="2"
                                Background="{DynamicResource {x:Static ui:CommonControlsColors.ButtonBrushKey}}"
                                Cursor="{x:Static Cursors.SizeNS}">
                                <TextBlock Text="⣿" HorizontalAlignment="Center" VerticalAlignment="Top" Padding="1,3,2,0" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <DataTemplate x:Key="extensionItemTemplate" DataType="{x:Type model:ExtensionItem}">
                <Border x:Name="dragBorder" cmt:comment="needed to transparency issue"
                      AllowDrop="true"
                      IsEnabled="true"
                      Background="Transparent"
                      IsHitTestVisible="True"
                      MouseMove="ExtensionItem_MouseMove"
                        MouseUp="ExtensionItem_MouseUp"
                      >
                    <Grid HorizontalAlignment="Stretch" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <StackPanel Grid.Row="0" Orientation="Horizontal" >
                                <Label FontWeight="Bold" Content="{Binding Title}"/>
                                <Label Content="(no name)" Visibility="{Binding Title, Converter={StaticResource emptyToVisi}}"/>
                                <Border CornerRadius="5" BorderThickness="1" BorderBrush="{Binding Foreground,ElementName=text}"
                                    VerticalAlignment="Center" Padding="5,0"
                                    Visibility="{Binding ShortCutKey,Converter={StaticResource notEmptyToVisi}}">
                                    <TextBlock Text="{Binding ShortCutKey}" FontFamily="Consolas" x:Name="text"/>
                                </Border>
                            </StackPanel>

                            <Grid Grid.Row="1" Opacity="0.8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding DllPath}" FontSize="9" HorizontalAlignment="Right" TextWrapping="NoWrap" Margin="20,0,0,0"/>
                                <TextBlock Text="{Binding ClassName}" FontSize="9" Margin="10,0,0,0" Grid.Column="1"/>
                            </Grid>
                        </Grid>
                        <Border Grid.Column="1" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0,0,0">
                            <Button MinWidth="0" Padding="5" Margin="0" Click="Run_Click">▶</Button>
                        </Border>
                        <Control Grid.Column="2" Style="{StaticResource mover}"/>
                    </Grid>

                </Border>
            </DataTemplate>
            <Style x:Key="btnArgumentDialog" TargetType="Button" BasedOn="{StaticResource {x:Static shell:VsResourceKeys.ButtonStyleKey}}">
                <Setter Property="Content">
                    <Setter.Value>
                        <Border BorderBrush="{Binding Foreground, ElementName=text}" BorderThickness="1" >
                            <StackPanel Orientation="Vertical">
                                <Rectangle Height="3" Fill="{Binding Foreground,ElementName=text}"/>
                                <TextBlock Text="?" Padding="4,0" x:Name="text" FontSize="9"/>
                            </StackPanel>
                        </Border>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="textValidation" TargetType="TextBlock">
                <!--<Setter Property="Foreground" Value="Red"/>-->
                <!--<Setter Property="Foreground" Value="{StaticResource {x:Static ui:ThemedDialogColors.ValidationErrorTextBrushKey}}"/>-->
                <Setter Property="Background" Value="{StaticResource {x:Static ui:ThemedDialogColors.ValidationErrorBrushKey}}"/>
                <!--<Setter Property="Background" Value="{StaticResource {x:Static shell:VsColors.err}}"-->
            </Style>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- toolbar -->
        <StackPanel Margin="3" Orientation="Horizontal">
            <StackPanel.Resources>
                <Style x:Key="btnStyle" TargetType="Button" 
                       BasedOn="{StaticResource {x:Static shell:VsResourceKeys.ButtonStyleKey}}">
                    <Setter Property="Margin" Value="0,0,5,0"/>
                    <Setter Property="Padding" Value="5,2,10,2"/>
                    <Setter Property="MinWidth" Value="0"/>
                </Style>
                <Style TargetType="Button" BasedOn="{StaticResource btnStyle}">
                </Style>
                <Style x:Key="btnSelectedStyle" TargetType="Button" BasedOn="{StaticResource btnStyle}">
                    <Setter Property="IsEnabled" Value="{Binding SelectedItem, Converter={StaticResource notEmpty}}"/>
                </Style>
            </StackPanel.Resources>
            <Button Click="Develop_Click" Content="(Debug version)" 
                    FontFamily="Consolas" FontSize="9" 
                    Visibility="{Binding IsDebug, Converter={StaticResource boolToVisi}}"/>
            <Button Click="AddItem_Click" Content="✚ Add" ToolTip="Add new extension"/>
            <Button Click="Delete_Click" Content="🗙 Delete" Style="{StaticResource btnSelectedStyle}" ToolTip="Delete selected extension"/>
            <Button Click="Run_Click" Content="▶ Run" Style="{StaticResource btnSelectedStyle}" ToolTip="Run selected extension"/>
            <Button Click="Debug_Click" Content="⚡Debug" Style="{StaticResource btnSelectedStyle}" ToolTip="Run selected extenion in debugger"/>
            <Button Click="ButtonDump_Click" Content="🔦DTE" ToolTip="Inspect DTE objects..."/>
            <Button Click="ButtonMore_Click" Content="💡More▾">
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="📋 Create copy of extension" Click="Copy_Click"/>
                        <MenuItem Header="Add new extension project to solution" Click="AddProj_Click"/>
                        <MenuItem Header="Add config as solution item" Click="AddConfig_Click"/>
                        <MenuItem Header="Validate all extensions" Click="CheckAll_Click"/>
                        <Separator/>
                        <MenuItem Header="Reload" Click="Load_Click"/>
                        <MenuItem Header="Sync to VS" Click="SyncToDte_Click"/>
                        <MenuItem Header="Save" Click="Save_Click"/>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>
        </StackPanel>
        <!-- list of extensions -->
        <ListBox Grid.Row="1" ItemsSource="{Binding Model.Extensions}" SelectedItem="{Binding SelectedItem}"
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                 ItemTemplate="{StaticResource extensionItemTemplate}"                 
                 >
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListBox>
        <!-- editor -->
        <StackPanel Grid.Row="2" Visibility="{Binding SelectedItem,Converter={StaticResource notEmptyToVisi}}">
            <StackPanel.Resources>
                <Style TargetType="Label" BasedOn="{StaticResource {x:Static shell:VsResourceKeys.ThemedDialogLabelStyleKey}}">
                    <Setter Property="Margin" Value="0,5,0,0"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Padding" Value="0,0"/>
                </Style>

                <!--<Style TargetType="TextBox" BasedOn="{StaticResource {x:Static toolkit:ToolkitResourceKeys.TextBoxStyleKey}}">-->
                <Style TargetType="TextBox" BasedOn="{StaticResource {x:Static shell:VsResourceKeys.TextBoxStyleKey}}">
                    <Setter Property="Margin" Value="0"/>
                    <Setter Property="MinHeight" Value="23"/>
                    <!-- copy from button -->
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                </Style>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Static shell:VsResourceKeys.ButtonStyleKey}}">
                    <Setter Property="Padding" Value="5,0"/>
                    <Setter Property="MinWidth" Value="25"/>
                    <Setter Property="MaxWidth" Value="0"/>
                    <!--<Setter Property="Width" Value="0"/>-->
                </Style>
            </StackPanel.Resources>
            <Border Margin="3">
                <Label Content="» Selected item" FontWeight="Bold" FontSize="15" />
            </Border>
            <StackPanel Margin="10,0,10,10">
                <TextBlock Style="{StaticResource textValidation}" Padding="2" Visibility="{Binding ValidationMessage,Converter={StaticResource notEmptyToVisi}}"><Run>⚠</Run><Run Text="{Binding ValidationMessage}"></Run></TextBlock>
                <Label Content="Title 🛈" ToolTip="Just title of extension for menu and list."/>
                <TextBox Text="{Binding SelectedItem.Title, UpdateSourceTrigger=PropertyChanged}"/>
                <Label Content="Key Shortcut 🛈" ToolTip="If you want to use key gesture, use comma ',' separator. Or use ';' to allow more options. "/>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Text="{Binding SelectedItem.ShortCutKey, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Text="&lt;Press key here&gt;" KeyDown="Shortcut_KeyDown" PreviewKeyDown="Shortcut_KeyDown"/>
                </Grid>
                <Label Content="DLL Path 🛈" ToolTip="You can use $(SolutionDir),$(Self) or any environment variable like %APP_MY_PATH%."/>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Text="{Binding SelectedItem.DllPath, UpdateSourceTrigger=PropertyChanged}"/>
                    <Button Grid.Column="1" Click="BrowseDll_Click">...</Button>
                    <Button Grid.Column="2" Click="SetSelf_Click" ToolTip="Internal extensions">⛨</Button>
                </Grid>
                <Label Content="Class Name 🛈" ToolTip="Pick class name with Run method"/>
                <ComboBox IsEditable="True" IsTextSearchEnabled="True" DropDownOpened="PickClass_Opened" Text="{Binding SelectedItem.ClassName}" />
                <Label Content="Argument 🛈" ToolTip="Argument property will be set with this value, or user will be asked for it."/>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Text="{Binding SelectedItem.Argument, UpdateSourceTrigger=PropertyChanged}"/>
                    <Button Grid.Column="1" Click="ArgumentAsk_Click" ToolTip="Ask for argument when executing" Style="{StaticResource btnArgumentDialog}"/>
                </Grid>
                <Label Content="Options"/>
                <StackPanel Orientation="Horizontal" Margin="10,3,0,0">
                    <CheckBox IsChecked="{Binding SelectedItem.OutOfProcess}" Content="Out of process 🛈" ToolTip="Extension is executed using anothe process, so all dlls are always reloaded and not locked."/>
                </StackPanel>
            </StackPanel>
        </StackPanel>
    </Grid>
</UserControl>
