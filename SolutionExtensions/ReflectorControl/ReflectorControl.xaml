<UserControl x:Class="SolutionExtensions.ReflectorControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:toolkit="clr-namespace:Community.VisualStudio.Toolkit;assembly=Community.VisualStudio.Toolkit"              
             xmlns:local="clr-namespace:SolutionExtensions"
             xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:conv="clr-namespace:SolutionExtensions"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignData /_DesignData/ReflectorRoot.xaml}"    
             >
    <Grid>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="boolToVisi"/>
            <conv:EmptyConverter x:Key="notEmptyToVisi" Inner="{StaticResource boolToVisi}" Negate="True"/>
            <conv:EmptyConverter x:Key="emptyToVisi" Inner="{StaticResource boolToVisi}"/>
            <conv:EmptyConverter x:Key="notEmpty" Negate="True"/>
            <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
            <Style x:Key="expanderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Width" Value="16"/>
                <Setter Property="Height" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                                <Path x:Name="ExpandPath" 
                                      Data="{StaticResource TreeArrow}" 
                                      Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" 
                                      Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="tvItemContainer" TargetType="TreeViewItem">
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:TreeViewColors.BackgroundTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TreeViewItem">
                            <Grid HorizontalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="Expander" ClickMode="Press" 
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                                              Style="{StaticResource expanderStyle}"
                                              />
                                <ContentPresenter x:Name="PART_Header" Grid.Column="1"
                                                  ContentSource="Header" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:TreeViewColors.HighlightedSpanBrushKey}}"/>
                                    <Setter Property="Background" Value="{DynamicResource {x:Static ui:TreeViewColors.HighlightedSpanBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:TreeViewColors.SelectedItemInactiveBrushKey}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="buttons" TargetType="ContentControl">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel Orientation="Horizontal" Margin="5,0,0,0">
                                <StackPanel.Resources>
                                    <Style TargetType="Button" x:Key="button">
                                        <!--<Setter Property="Background" Value="Transparent"/>-->
                                        <Setter Property="Background" Value="{DynamicResource {x:Static ui:ThemedDialogColors.ActionButtonBackgroundActiveBrushKey}}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:ThemedDialogColors.ActionButtonTextBrushKey}}"/>
                                        <Setter Property="Width" Value="20"/>
                                        <Setter Property="FontFamily" Value="Courier New"/>
                                        <Setter Property="FontSize" Value="9"/>
                                        <Setter Property="Margin" Value="0,0,2,0"/>
                                        <Setter Property="Padding" Value="2,0"/>
                                    </Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource button}"/>
                                    <Style x:Key="genButton" TargetType="Button" BasedOn="{StaticResource button}">
                                        <Setter Property="Width" Value="20"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Padding" Value="0"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <Border HorizontalAlignment="Stretch"
                                                            VerticalAlignment="Stretch"
                                                            CornerRadius="4" 
                                                            BorderThickness="1"
                                                            BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                            >
                                                        <ContentPresenter 
                                                            HorizontalAlignment="Center"
                                                            VerticalAlignment="Center"                                                                                                                       
                                                            Content="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"/>
                                                    </Border>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </StackPanel.Resources>
                                <Button Content=".p" ToolTip="Expand properties" Visibility="{Binding CanExpandProperties, Converter={StaticResource boolToVisi}}" Click="ExpandProperties_Click"/>
                                <Button Content="{}{i}" ToolTip="Expand interfaces" Visibility="{Binding CanExpandInterfaces, Converter={StaticResource boolToVisi}}" Click="ExpandInterfaces_Click"/>
                                <Button Content="m()" ToolTip="Expand methods" Visibility="{Binding CanExpandMethods, Converter={StaticResource boolToVisi}}" Click="ExpandMethods_Click"/>
                                <Button Content="[e]" ToolTip="Expand enumerable items" Visibility="{Binding CanExpandEnumerable, Converter={StaticResource boolToVisi}}" Click="ExpandEnumerable_Click"/>
                                <Button Content="c#" ToolTip="Generate c# source" Click="Generate_Click" Style="{StaticResource genButton}"/>
                            </StackPanel>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ControlTemplate x:Key="addButtonsTemplate" TargetType="ContentControl" >
                <Border HorizontalAlignment="Stretch" Padding="0">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colButtons"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter/>
                        <ContentControl Grid.Column="1" Style="{StaticResource buttons}"/>
                    </Grid>
                </Border>
            </ControlTemplate>
            <Style x:Key="addButtons" TargetType="ContentControl" >
                <Setter Property="Template" Value="{StaticResource addButtonsTemplate}"/>
            </Style>
            <Style x:Key="icon" TargetType="ContentControl">
                <Setter Property="FontFamily" Value="Courier New"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Padding" Value="0,0,5,0"/>
                <Setter Property="Margin" Value="0,0,3,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ContentControl">
                            <Border CornerRadius="3" 
                                    Background="{TemplateBinding Background}"
                                    MinWidth="5" MinHeight="5" VerticalAlignment="Stretch"
                                    Margin="1">
                                <ContentPresenter/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="code" TargetType="TextBlock">
                <Setter Property="FontFamily" Value="Courier New"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
            <Style x:Key="codeRun" TargetType="Run">
                <Setter Property="FontFamily" Value="Courier New"/>
            </Style>
            <Style x:Key="canvasValue" TargetType="Canvas">
                <Setter Property="Grid.Column" Value="2"/>
                <Setter Property="ClipToBounds" Value="True"/>
            </Style>
            <HierarchicalDataTemplate 
                DataType="{x:Type local:ReflectorRoot}"
                ItemsSource="{Binding Path=Children}">
                <ContentControl Style="{StaticResource addButtons}">
                    <TextBlock Padding="5,0" Text="{Binding RootType}"/>
                </ContentControl>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate 
                DataType="{x:Type local:ReflectorPropertyValue}"
                ItemsSource="{Binding Path=Children}">
                <ContentControl Style="{StaticResource addButtons}">
                    <ContentControl.ToolTip>
                        <StackPanel>
                            <TextBlock>
                                <Run Text="Type: "/>
                                <Run Text="{Binding PropertyTypeName}" Style="{StaticResource codeRun}" FontWeight="Bold"/>
                            </TextBlock>
                            <TextBlock Visibility="{Binding PropertyModifiers, Converter={StaticResource notEmptyToVisi}}">
                                <Run Text="{Binding PropertyModifiers}" Style="{StaticResource codeRun}"/>
                            </TextBlock>
                        </StackPanel>
                    </ContentControl.ToolTip>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colIco"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colName"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Style="{StaticResource icon}" 
                                        Content="(p)"
                                        Background="#4080ff80"/>
                        <TextBlock Grid.Column="1">
                            <Run Text="{Binding PropertyName}" FontWeight="Bold"/>
                        </TextBlock>
                        <Canvas Style="{StaticResource canvasValue}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Visibility="{Binding ValueSimpleText,Converter={StaticResource notEmptyToVisi}}" Margin="0,0,5,0">
                                =<Run Text="{Binding ValueSimpleText}"/>
                                </TextBlock>
                                <TextBlock 
                                    Visibility="{Binding IsNull,Converter={StaticResource boolToVisi}}" 
                                    Opacity="0.4"
                                    Margin="0,0,5,0">
                                =<Run Text="(null)"/>
                                </TextBlock>
                            </StackPanel>
                        </Canvas>
                    </Grid>
                </ContentControl>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate 
                DataType="{x:Type local:ReflectorMethod}"
                ItemsSource="{Binding Path=Children}">
                <ContentControl Style="{StaticResource addButtons}" >
                    <ContentControl.ToolTip>
                        <StackPanel>
                            <TextBlock>                                
                                <Run Text="{Binding Signature}" Style="{StaticResource codeRun}" FontWeight="Bold"/>
                            </TextBlock>
                        </StackPanel>
                    </ContentControl.ToolTip>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colIco"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colName"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Style="{StaticResource icon}" 
                                        Content="(m)"
                                        Background="#408080ff"/>
                        <TextBlock Text="{Binding MethodName}" Grid.Column="1" FontWeight="Bold" />
                        <Canvas Style="{StaticResource canvasValue}">
                            <TextBlock Text="{Binding Signature}" Style="{StaticResource code}"/>
                        </Canvas>
                    </Grid>
                </ContentControl>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate 
                DataType="{x:Type local:ReflectorEnumItem}"
                ItemsSource="{Binding Path=Children}">
                <ContentControl Style="{StaticResource addButtons}" >
                    <ContentControl.ToolTip>
                        <StackPanel>
                            <TextBlock>                                
                                <Run Text="{Binding ValueTypeName}" Style="{StaticResource codeRun}" FontWeight="Bold"/>
                            </TextBlock>
                        </StackPanel>
                    </ContentControl.ToolTip>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colIco"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colName"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Style="{StaticResource icon}" 
                                        Content="{Binding Index, StringFormat={}[{0}]}"
                                        Background="#4040ff40"/>
                        <Canvas Style="{StaticResource canvasValue}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding ValueSimpleText}"/>
                                <TextBlock Text="{Binding ValueTypeName}" FontWeight="Bold"/>
                            </StackPanel>
                        </Canvas>
                    </Grid>
                </ContentControl>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate 
                DataType="{x:Type local:ReflectorInterface}" 
                ItemsSource="{Binding Path=Children}">
                <ContentControl Style="{StaticResource addButtons}" >
                    <ContentControl.ToolTip>
                        <StackPanel>
                            <TextBlock>                                
                                <Run Text="{Binding ValueTypeName}" Style="{StaticResource codeRun}" FontWeight="Bold"/>
                            </TextBlock>
                        </StackPanel>
                    </ContentControl.ToolTip>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colIco"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="colName"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Style="{StaticResource icon}" 
                                        Content="{}{i}"
                                        Background="#40FFFF00"/>

                        <Canvas Style="{StaticResource canvasValue}" Grid.Column="1" Grid.ColumnSpan="2">
                            <TextBlock Text="{Binding ValueTypeName}" FontWeight="Bold" Style="{StaticResource code}"/>
                        </Canvas>
                    </Grid>
                </ContentControl>
            </HierarchicalDataTemplate>
        </Grid.Resources>
        <TreeView x:Name="treeView" 
                  ItemsSource="{Binding Children}" Grid.IsSharedSizeScope="True"
                  ItemContainerStyle="{StaticResource tvItemContainer}">
        </TreeView>
    </Grid>
</UserControl>
